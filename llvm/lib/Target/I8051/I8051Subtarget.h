//===-- I8051Subtarget.h - Define Subtarget for the I8051 -----------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the I8051 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_I8051_SUBTARGET_H
#define LLVM_I8051_SUBTARGET_H

#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#include "I8051FrameLowering.h"
#include "I8051ISelLowering.h"
#include "I8051InstrInfo.h"
#include "I8051SelectionDAGInfo.h"
#include "MCTargetDesc/I8051MCTargetDesc.h"

#define GET_SUBTARGETINFO_HEADER
#include "I8051GenSubtargetInfo.inc"

namespace llvm {

class I8051TargetMachine;

/// A specific I8051 target MCU.
class I8051Subtarget : public I8051GenSubtargetInfo {
public:
  //! Creates an I8051 subtarget.
  //! \param TT  The target triple.
  //! \param CPU The CPU to target.
  //! \param FS  The feature string.
  //! \param TM  The target machine.
  I8051Subtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
               const I8051TargetMachine &TM);

  const I8051InstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const I8051TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const I8051SelectionDAGInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const I8051RegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }

  /// Parses a subtarget feature string, setting appropriate options.
  /// \note Definition of function is auto generated by `tblgen`.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  I8051Subtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                const TargetMachine &TM);

  // Subtarget feature getters.
#define GET_SUBTARGETINFO_MACRO(ATTRIBUTE, DEFAULT, GETTER)                    \
  bool GETTER() const { return ATTRIBUTE; }
#include "I8051GenSubtargetInfo.inc"

  bool enableSubRegLiveness() const override { return true; }

  /// Gets the ELF architecture for the e_flags field
  /// of an ELF object file.
  unsigned getELFArch() const {
    assert(ELFArch != 0 &&
           "every device must have an associate ELF architecture");
    return ELFArch;
  }

private:
  /// The ELF e_flags architecture.
  unsigned ELFArch = 0;

  // Subtarget feature settings
#define GET_SUBTARGETINFO_MACRO(ATTRIBUTE, DEFAULT, GETTER)                    \
  bool ATTRIBUTE = DEFAULT;
#include "I8051GenSubtargetInfo.inc"

  I8051InstrInfo InstrInfo;
  I8051FrameLowering FrameLowering;
  I8051TargetLowering TLInfo;
  I8051SelectionDAGInfo TSInfo;
};

} // end namespace llvm

#endif // LLVM_I8051_SUBTARGET_H
